#include <iostream>
#include <vector>
#include <memory.h>
#include<algorithm>

using namespace std;

int const N = 2* 1e6 + 1;
bool prime[N];
vector<int> primes;

void sieve() {
  memset(prime, true, sizeof prime);
  
  prime[0] = false;
  prime[1] = false;
  
  for(int i = 2; i * i < N; i++)
    if(prime[i])
      for(int j = i + i; j < N; j += i)
        prime[j] = false;
  for(int i = 0; i < N; i++)
    if(prime[i])
      primes.push_back(i);
}
int main ()
{
  sieve();
  int x , a , b;
  cin>> x;
  while (  x != 0)
  {
    
    if ( binary_search ( primes.begin() , primes.end() , x) )
      cout<< 0 <<endl;
    else 
    {
       a = lower_bound(primes.begin() , primes.end() , x) - primes.begin();
       b = a - 1;
       cout<< primes[a] - primes[b]<<endl;
    } 
    
    cin >> x;
  }
  return 0;
}
