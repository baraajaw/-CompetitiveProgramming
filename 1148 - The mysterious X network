#include <stdio.h>
#include <memory.h>
#include <vector>
#include <algorithm>
#include<iostream>
#include<string>
#include <ctype.h>
#include <iomanip>
#include<map>
#include<queue>
using namespace std;
int n , a , b;
int const N = 1e5 + 1;
vector < vector < int >> g;
bool vis[N];
int cost[N];
queue<int > q;
int bfs ( int src , int des)
{
	memset( vis , false , sizeof vis);
	memset (cost , 0 , sizeof cost);
	  while ( !q.empty())
	       q.pop();
	   q.push( src);
	   while ( !q.empty())
	   {
		   int fr = q.front();
		   q.pop();
		   vis[fr] = true;
		   if ( fr == des)
			    return cost[fr];
		   for ( int i = 0 ; i < g[fr].size() ; ++i)
		   {
			   if ( !vis[g[fr][i]])
			   {
				   cost[g[fr][i]] = cost[fr] + 1;
				   vis[g[fr][i]] = true;
				   q.push((int)g[fr][i]);
				   
			   }
		   }
	   }
	   return 0;
}

int main() {
   int t , m , x , y;
   
   scanf ( "%d" , &t);
    for ( int l = 0 ; l < t ; ++l )
    {
	  scanf ("%d" , &n);
	  g.clear();
	  g.resize(n);
	  for ( int i = 0 ; i < n ; ++i)
	  {
		  scanf ( "%d%d" , &x , &m);
		  for ( int j = 0 ; j < m ; ++j)
		  {
			  scanf ("%d" , &y);
			  g[x].push_back(y);
		  }
	  }
	  scanf ("%d%d" , &a , &b);
	  printf ("%d %d %d\n" , a , b , bfs ( a , b) - 1);
	   if ( l + 1 < t)
	  puts("");
   }


	return 0;
}
