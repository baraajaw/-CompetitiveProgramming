#include <iostream>
#include <memory.h>
#include<vector>
#include<stdio.h>
#include<algorithm>
#include<string>
#include<math.h>
#include<cmath>
#include<set>
#include <queue>
#include <bitset>
#include <map>
#include <iomanip>
#include <stack>
#include <ctype.h>
using namespace std;
int n , m;
int child = 0 , DFSTime = 0; 
string s;
vector < vector < int > > g;
vector<int> idx, low;
bool vis[1001][1001];
vector<bool> art;
vector<pair<int, int> > bridges , oneDi;

void DFS( int u, int p) { 

  idx[u] = low[u] = ++DFSTime;
  
  for(int i = 0; i < g[u].size(); ++i) {
    int v = g[u][i];
   
    if(idx[v] == 0) {
      vis[u][v] = vis[v][u] = true;
      DFS(v, u);
      low[u] = min(low[u], low[v]);
      

      if(low[v] > idx[u] ){
        bridges.push_back(make_pair(u, v));
      }
      else 
        oneDi.push_back(make_pair( u , v)); 
          
 
    }
    else if(v != p){
      low[u] = min(low[u], idx[v]);
      if ( !vis[u][v]&& !vis[v][u])
      oneDi.push_back(make_pair( u , v));
       vis[u][v] = vis[v][u] = true;
    }

  }
}



int main() {

  freopen ("in" , "r" , stdin);
  
   int t = 1;
  
  while ( scanf("%d%d\n" , &n , &m)  && (n != 0 || m != 0)) {

      memset ( vis , false  , sizeof vis);
      g.clear();
      idx.clear();
      low.clear();
      oneDi.clear();
      bridges.clear();
      idx.resize(n);
      low.resize(n);
      g.resize(n);
      DFSTime = 0;
      child = 0;

      for ( int i = 0 ; i < m ; ++i){
          int a , b;
          cin >> a >> b;
          a--; b--;
          g[a].push_back(b);
          g[b].push_back(a);      
      }

   for ( int i= 0 ; i < n ; ++i){
     if ( idx[i] == 0)
        DFS ( i , -1);
   }
   cout << t++ << "\n\n";
   for ( int i = 0 ; i < oneDi.size() ; ++i)
       cout << oneDi[i].first + 1<<" "<< oneDi[i].second + 1<< endl;
  for ( int i = 0 ; i < bridges.size() ; ++i){
      cout << bridges[i].first + 1<<" "<< bridges[i].second + 1 << endl;
      cout << bridges[i].second + 1<<" "<< bridges[i].first+ 1 << endl;
    }
   cout << "#"<<endl; 

 


}



  
  return 0;
}
