#include <iostream>
#include <stdio.h>
#include <string>
#include <string.h>
#include <vector>
#include <algorithm>
#include <memory.h>
#include <map>
#include <queue>
#include <stack>
#include<set>
#include <cmath>
#define ll long long
#define f(i, x, n) for(int i = x; i < (int)(n); ++i)
#define f2(i, x, n) for(int i = x; i >= n; --i)

using namespace std;
int const N= 32768 + 1;
int main() {
  
  freopen("in" , "r" , stdin); 
  int n, a[N];
  ll sum[N];
  vector <pair < int, int> > vc;
  while (cin >> n){
  	    int corner =pow (2.0, n), tmp = pow (2.0, n), cnt=0;
  	    vc.clear();
 		f(i, 0, corner)
 			scanf("%d", a +i);
        while(tmp != 1){
        	vc.push_back(make_pair(tmp/2, -1));
        	tmp/=2;
        }
        f(i, 0, corner){
        	sum[i] =0;
        	f(j, 0, vc.size()){
        		if(cnt % vc[j].first == 0){
        			if(vc[j].second == 1) vc[j].second= -1;
        			else vc[j].second = 1;
        		}
        		sum[i] += a[ abs (i + vc[j].first * vc[j].second)];
        		//cout << vc[j].first * vc[j].second<<"  ";
        		//cout << cnt % vc[j].first <<"  ";
        	}
        	cnt++;
        }
        cnt =0;
        ll res=0;
        f(j, 0, vc.size())
        	vc[j].second = -1;
         f(i, 0, corner){
         	ll ans = 0;
         	f(j, 0, vc.size()){
         		if(cnt % vc[j].first == 0){
        			if(vc[j].second == 1) vc[j].second= -1;
        			else vc[j].second = 1;
        		}
        		ans = max ( ans , sum[i] + sum[abs (i + vc[j].first * vc[j].second)]);
         	}
         	cnt++;
         	res = max(res, ans);
         }
    printf("%lld\n", res);

  }

  return 0;     
}
  
