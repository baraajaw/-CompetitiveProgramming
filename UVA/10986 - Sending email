#include<iostream>
#include<stdio.h>
#include<queue>
#include<vector>
#include<algorithm>
#include<memory.h>
using namespace std;
int const N = 1e6 + 1;
int const M = 2 * 1e9 + 1;
int n , m;
bool vis[N];
pair<int, int> cost[N];
vector < vector < pair < int , int > > > g;
priority_queue<pair < int , int > > q;
void Dijkstra( int src)
{
  int v , c;
  memset(vis, false, sizeof vis);
  while ( !q.empty() ) q.pop();
  for ( int i = 0 ; i < n ; ++i)
  {
    cost[i].first = M;
    cost[i].second = i;
  }
  cost[src].first = 0;
  cost[src].second = src;
  q.push(make_pair(0, src));
  
  while ( !q.empty())
  {
    v =  q.top().second;
    c = -q.top().first;
    q.pop();
    if (vis[v]) continue;
    vis [v] = true;
    
    for ( int i= 0 ; i < g[v].size() ; ++i)
    {
      if (g[v][i].second + c < cost[g[v][i].first].first)
      {
        cost[g[v][i].first].first = g[v][i].second + c;
       q.push(make_pair(-cost[g[v][i].first].first, g[v][i].first));
       }
    }
  }
 
  
}
 
int main()
{
  int t , u , v , c , a , b , tt = 1; 
  scanf ("%d" , &t);
  while ( t--)
  {
    scanf ("%d%d%d%d" , &n , &m , &a , &b);
    g.clear();
    g.resize(n);
    for ( int i = 0 ; i < m ; ++i)
    {
            
      scanf ("%d%d%d" , &u , &v , &c);
      g[u].push_back(make_pair( v , c));
      g[v].push_back(make_pair( u , c));
     
    }

    if ( m > 0)
     {
       Dijkstra(a);
      if ( cost[b].first == M) 
           printf("Case #%d: unreachable\n" , tt);
      else
           printf("Case #%d: %d\n" , tt , cost[b].first);
     }
    else
     printf("Case #%d: unreachable\n" , tt);
    tt++; 
  }
  return 0;
} 
