#include<iostream>
#include<stdio.h>
#include<string>
#include<algorithm>
#include<vector>
#include<memory.h>
using namespace std;
int const N = 1e6 + 1;
bool prime [N];
vector < int> primes;
void sieve()
{
  memset(prime , true , N);
	   for ( int i = 5 ; i < N ; i+= 4)
	      if ( prime[i])
	      for ( int j = i + i ; j < N ; j+= i )
	      prime [j] = false;

	      for ( int j = 5 ; j < N ; j+= 4)
	      if ( prime[j])
	      primes.push_back(j);

}
int main()
{


	     bool flag = true;
	     int sum = 0 , n , x , y;
	     vector <int > vc;
	     sieve();
	     
	     for ( int i = 0 ; i  < primes.size() ; i++)
	        for ( int j = 0 ; j < primes.size() ; j++)
	        {    if ( primes[i] * primes[j] > 1000001)
	          	          break;
	            vc.push_back ( primes[i] * primes[j]);
	        }
	        
	   sort ( vc.begin() , vc.end());
		vc.resize( unique ( vc.begin() , vc.end()) - vc.begin());
		
	while ( scanf ( "%d" , &n) && n != 0)
	{
	   int l = upper_bound ( vc.begin() , vc.end() , n) - vc.begin();
	      printf ( "%d %d\n" , n , l );
	}



	return 0;
}
