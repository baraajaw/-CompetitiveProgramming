#include <stdio.h>
#include <memory.h>
#include <vector>
#include <algorithm>
#include<iostream>
#include<string>
#include<map>
using namespace std;
vector < string> g;
vector < pair < int , int > > vct;
map < pair < int , int > , int > mp;
int  n , m , x , cnt , y;
bool flag = true;
void dfs(int i , int j )
{
	if ( i >= n || i < 0 || j >= m || j < 0 )
		   return;
	 char tmp = g[i][j];
	if ( tmp == 'N')
		{
		     vct.push_back( make_pair ( i , j));
		    g[i][j] = '.';
		    cnt++;
       mp[make_pair(i, j)] = cnt;
		 dfs ( i - 1 , j );
		}
	else if ( tmp == 'S')
	   {
		vct.push_back( make_pair ( i , j));
		g[i][j] = '.';
		cnt++;
		mp[make_pair(i, j)] = cnt;

		dfs ( i + 1 , j);
	   }
	else if ( tmp == 'E')
		 {
		    vct.push_back( make_pair ( i , j));
		   g[i][j] = '.';
		   cnt++;
		   mp[make_pair(i, j)] = cnt;

		   dfs ( i , j + 1);
		  }
	else if ( tmp == 'W')
		{
		vct.push_back( make_pair ( i , j));
		   g[i][j] = '.';
	        cnt++;
	       mp[make_pair(i, j)] = cnt;

		 dfs ( i , j - 1);
		}
	else if ( tmp == '.')
	{
		y = cnt - mp[make_pair( i , j)];
	 cnt = mp[make_pair( i ,j )] - 1;
		flag = false;
					 
	}
}

int main() {

	while ( scanf ("%d%d%d" , &n , &m , &x) && n && m && x)
	{
	  g.clear();
	  g.resize(n);
	  mp.clear();
	  cnt = 0;
	  flag = true;
		for ( int i = 0 ; i < n ; ++i)
			   cin >> g[i];
		dfs ( 0 , x - 1);
		if ( flag)
			printf ("%d step(s) to exit\n" , cnt);
		
		else 
    printf ("%d step(s) before a loop of %d step(s)\n" , cnt , y + 1);
  
  	}

	return 0;
}
