#include<iostream>
#include<vector>
#include<bitset>
#include<stdio.h>
#include<memory.h>
#include<map>
#include<string>
#include<algorithm>
using namespace std;

vector<string> g;
vector < pair < int , char> > vct;
map <char , int > mp;

map < char , int > :: iterator it;
int dx[] = { -1 , 0 , 1 , 0 };
int dy[] = { 0 , 1 , 0 , -1};
int n , m ; 
void dfs ( int x , int y ,  char tmp)
{
     g[x][y] = '.';
   for ( int i = 0 ; i < 4 ; ++i)
   {
	   int nx = x + dx[i];
	   int ny = y + dy[i];
	   if ( nx < n && nx >= 0 && ny < m && ny >= 0 && g[nx][ny] == tmp)
	   {
		   dfs ( nx , ny , tmp);
	   }
   }
}
bool comp ( pair <int , char> a , pair < int , char> b)
{
	return ( a.first > b.first || ( a.first == b.first && a.second < b.second));
}
int main()
{

	int t , arr[26];
	for (int i = 0 ; i < 26 ; ++i)
	    arr[i] = 0;
	scanf ( "%d" , &t);
	for ( int q = 1 ; q <= t ; ++q)
	{
	  scanf ("%d%d" , &n , &m);
		g.clear();
		vct.clear();
		g.resize(n);
		mp.clear();
	  for ( int i = 0 ; i < n ;++i)
		   cin >> g[i];
	  for ( int i = 0 ; i < n ;++i)
		  for ( int j = 0 ; j < m ; ++j)
			  if ( g[i][j] != '.')
			  {
				  mp[g[i][j]]++;
				  arr[g[i][j] - 'a']++;
				  dfs (i , j  , g[i][j]);
			  }
			  
	  printf("World #%d\n" , q);
	  for ( it = mp.begin() ; it != mp.end() ; it++)
		  vct.push_back(make_pair ( it->second , it -> first));
	  
	  sort ( vct.begin() , vct.end() , comp);
      for ( int i = 0 ; i < vct.size() ; ++i)
    	    printf ("%c: %d\n" , vct[i].second , vct[i].first);
	}
	
	return 0;
}
