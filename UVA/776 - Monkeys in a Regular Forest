#include <stdio.h>
#include <memory.h>
#include <vector>
#include <algorithm>
#include<iostream>
#include<string>
#include <ctype.h>
#include <iomanip>      // std::setw
#include<map>
using namespace std;
vector < string> g;
vector<int> vc;
vector < vector < int >> vct;
int  cnt = 0 ,  ctl= 0 , mx = 0;
int dx[] = { -1 , -1 ,0 , 1 , 1  , 1 , 0 , -1};
int dy[] = { 0 , 1 , 1 , 1 , 0 , -1 , -1 , -1 };
//***************
void dfs( int x , int y , char tmp )
{ 
  g[x][y] = '.';
  vct[x][y] = cnt;
	for ( int i = 0 ; i < 8 ; ++i)
	{
	  int nx = x + dx[i];
	  int ny = y + dy[i];
	  if ( nx >= 0 && nx < g.size() && ny >= 0 && ny < g[x].size() && tmp == g[nx][ny])
	     dfs ( nx , ny , tmp);
	}
}

int main() {

	   string s , c = "";
	   
	   while ( getline ( cin , s)  )
	   {
		    
		   if ( s[0] == '%')
		   {   
		    
		           vct.resize(g.size());
		       for ( int i = 0 ; i < g.size() ; ++i) 
		         vct[i].resize(g[i].size());
		      //**************************     
		     for ( int i = 0 ; i < g.size() ; ++i)
		      for ( int j = 0 ; j < g[i].size() ; ++j)
		          if ( isalpha( g[i][j]))
			       {
			         cnt++;
			         dfs ( i , j , g[i][j]); 
			       }
			    //************************* 
			 cnt = 0;
			 for ( int i = 0 ; i < g[0].size() ; ++i)
			     {
			       for ( int j = 0 ; j < g.size() ; ++j)
			             mx = max ( mx , vct[j][i]);
			             int w = 0;
			             while ( mx != 0)
			             {
			                   mx /= 10;
			                   w++;
			             }
			             vc.push_back(w);
			     }
		   for ( int i = 0 ; i < g.size() ; ++i )
		        {
		          for ( int j = 0 ;j < g[i].size() ; ++j)
		           { 
		             cout <<setw(vc[j]);
		             cout << vct[i][j];
		             if ( j + 1 < g[i].size())
		               cout<<" ";
		             
		           }
		               puts("");
		        }
		        puts ("%");
		
		         g.clear();
		         
	   vc.clear();
		   }
		   else
		   {
			   for ( int i = 0 ; i < s.size() ; ++i)
				     if ( isalpha( s[i]))
				    	 c += s[i];
				    g.push_back(c);   
				   
		   c = "";
		   
	   }
	   }
	   vc.clear();
	   if ( g.size() > 0)
	   {
	        
		       vct.resize(g.size());
		       for ( int i = 0 ; i < g.size() ; ++i) 
		         vct[i].resize(g[i].size());
		      //**************************     
		     for ( int i = 0 ; i < g.size() ; ++i)
		      for ( int j = 0 ; j < g[i].size() ; ++j)
		          if ( isalpha( g[i][j]))
			       {
			         cnt++;
			         dfs ( i , j , g[i][j]); 
			       }
			    //************************* 
			 cnt = 0;
			 for ( int i = 0 ; i < g[0].size() ; ++i)
			     {
			       for ( int j = 0 ; j < g.size() ; ++j)
			             mx = max ( mx , vct[j][i]);
			             int w = 0;
			             while ( mx != 0)
			             {
			                   mx /= 10;
			                   w++;
			             }
			             vc.push_back(w);
			     }
		   for ( int i = 0 ; i < g.size() ; ++i )
		        {
		          for ( int j = 0 ;j < g[i].size() ; ++j)
		           { 
		             cout <<setw(vc[j]);
		             cout << vct[i][j];
		             if ( j + 1 < g[i].size())
		               cout<<" ";
		             
		           }
		               puts("");
		        }
		        puts ("%");
	   }
	   

	return 0;
}
