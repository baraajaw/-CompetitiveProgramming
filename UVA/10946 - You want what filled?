#include <iostream>
#include <stdio.h>
#include <string>
#include <string.h>
#include <vector>
#include <algorithm>
#include <memory.h>
#include <map>
#include <queue>
#include <stack>
#include<set>
#include <cmath>
#define ll long long 
#define f(i, x, n) for(int i = x; i < (int)(n); ++i)
using namespace std;
int n, m, cnt = 1;
vector < pair < int , char > > v;
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};
string g[51];
int dfs (int i, int j, char old ){
    g[i][j]= '.';
	f(k, 0, 4){
		int nx = dx[k] + i;
		int ny = dy[k] + j;
		if ( nx < n && nx >= 0 && ny < m && ny >= 0 && g[nx][ny] == old){
			dfs(nx, ny, old);
			cnt++;
		}
	}
	return cnt;
}
bool so ( pair <  int, char> a, pair <int, char > b){
	return (a.first > b.first) || (a.first == b.first && a.second < b.second);
}
int main() {
 int tt = 1;
 while ( cin >> n >> m && m != 0 && n != 0){
 	v.clear();
 	f(i, 0, n)
 		cin >> g[i];
 	f(i, 0, n){
 		f(j, 0, m)
 			if (g[i][j] != '.'){
 				char x = g[i][j];
 				dfs(i, j, g[i][j]);
 				v.push_back(make_pair(cnt, x));
 				cnt = 1;
 			}
 	}
 	sort(v.begin(), v.end(), so);
 	printf("Problem %d:\n", tt++);
 	f(i, 0, v.size())
 		cout << v[i].second <<" "<< v[i].first << endl;

 }
  return 0;
 }
