#include <iostream>
#include <vector>
#include <algorithm> 
#include <stdio.h>
#include <cmath>
using namespace std;
vector< int > v , vc;

bool can ( double mid){


  for ( int i = 0 ; i < vc.size() ; ++i)
  {
    double d = vc[i] / 2.0;
    if ( d > mid)
      return false;
  }

  return true;
}


 int main() {

 // freopen ("in" , "r" , stdin);

 

  int n , l;

  scanf ("%d%d" , &n , &l);

  v.resize(n);

  for ( int i = 0 ; i < n; ++i)
       scanf ("%d" , &v[i]);

  sort ( v.begin() , v.end());
  
  for ( int i = 0 ; i < n; ++i)
       if ( i + 1 < n)
          vc.push_back ( v[i + 1] - v[i]); 



   /*double mid = 0 , res = 0;
  int  k = 0  , r = 1e9;

  while ( k <= r){
 
    mid = ( k + r ) / 2.0;
    cout << k <<"  "<< r << endl;
    bool ok = can (mid);
    
    if (ok){
      res = mid;
      r = mid - 1;
    }
    else
      k = mid + 1;
  }          
  */

  sort ( vc.begin () , vc.end());


double res = 0;

for ( int i = 0 ; i < vc.size() ; ++i)
    res = max ( res , vc[i] / 2.0 );
    

  res = max ( res , (double) v[0]);
  res = max ( res , (double) l - v[v.size() - 1]);  


printf("%lf\n", res);

  return 0;
     }
