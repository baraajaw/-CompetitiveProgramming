#include <iostream>
#include <stdio.h>
#include <string>
#include <string.h>
#include <vector>
#include <algorithm>
#include <memory.h>
#include <map>
#include <queue>
#include <stack>
#include <set>
#include <cmath>
#include <time.h>
#include <bitset>
#define ll long long 
#define f(i, x, n) for(int i = x; i < (int)(n); ++i)
using namespace std;
struct trie {
  trie *next[26];
  bool end;
  int pre;
  
  trie() {
    for(int i = 0; i < 26; ++i)
      next[i] = NULL;
      end= pre = 0;
  }
};
//***************
trie *root;
string s, c;
vector < string > v;
//*****************

void insert(){
    trie * cur = root;
    f(i, 0, s.size()){
        int num = s[i] - 'a';
        if (cur -> next[num] == NULL)
            cur -> next[num] = new trie();
        cur = cur -> next[num];
        ++cur -> pre;
    }
    cur -> end = true;
}
//******************
void make_word (string tmp, trie * cur );
bool find() {
  trie *cur = root;
  string tmp;
  f(i, 0, s.size()){
    int num = s[i] - 'a';
    if (cur -> next[num] == NULL)
        return false;
    cur = cur -> next[num];
  }
  c = s;
  tmp = s;
  f(i, 0, 26){
    c = s;
    tmp = s;
    if ( cur->next[i] != NULL){
        c += ( i + 'a');
        tmp += ( i + 'a');
        trie * tmpcur = cur -> next[i];
        make_word(tmp, tmpcur); 
    }
  }
  return true;
}
// ***************
void make_word (string tmp, trie * cur ){
    if ( cur -> end)
        v.push_back(tmp);
    f(i, 0, 26){
        if ( cur -> next[i] != NULL){
            tmp +=( i + 'a');
            trie * tmpcur = cur -> next[i];
            make_word (tmp, tmpcur);
            tmp = tmp.substr ( 0 , tmp.size() - 1);

        }   
    }
}

void freeTrie(trie *cur) {
  if(cur == NULL)
    return;
  for(int i = 0; i < 26; ++i)
    freeTrie(cur->next[i]);
  delete [] cur;
}

int main() {

  root = new trie();
  
  int n;
  scanf("%d", &n);
  for(int i = 0; i < n; ++i) {
    cin >> s;

    insert();
  }
  int m;
  cin >> m;
  for(int i = 0; i < m; ++i) {
    cin >> s;
    v.clear();

    printf("Case #%d:\n", i + 1 );

    if(find())
      f (j, 0, v.size() )
        printf("%s\n" , v[j].c_str());
    else
        puts("No match.");      
  }
  
  freeTrie(root);
  
  return 0;
}
